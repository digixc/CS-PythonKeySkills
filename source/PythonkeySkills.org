 #+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil  
#+TITLE: Python Key Skills
#+AUTHOR: Xiaohui Ellis

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Python Key Skills
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It - convert from number data type to string
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

#+BEGIN_SRC Python
myName = "Jack"   # A string
myAge = 5         # A number

# To convert myAge to a string so we can make a longer string to display:
print(myName + " : " + str(myAge))
#+END_SRC

** Learn It - comparing values and comparators
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Comparators check if a value is (or is not) equal to, greater than (or equal to), or less than (or equal to) another value. 
- The result of comparator operation is always a Boolean vale - =True= or =False=
- Depending on the comparing outcome, the program then decide what to do next.
- Python has the following comparators: 
  - logical operators
    - Equality, ==
    - Not equal, !=
    - Greater Than, >
    - Less Than, <
    - Greater than or equal to, >=
    - Less than or equal to, <=
  - Boolean operators: and, or, not
    - =and=: evaluates to True when both clauses (expressions) are True
    - =or=: evaluates to True when either of the expressions are True
    - =not=: evaluates to True when the expression is False. Evaluates to False when the expression is True.
- Example usages of comparators
#+BEGIN_SRC Python
hunger = True
numberOfPizza = 5
drink="fizzyPop"

if numberOfPizza >= 3:
   print("Have some pizza, since we have 3 or more")
else:
   print("You cannot have any pizza")


if hunger == True and numberOfPizza >= 1:
   print("You are hungry, and there is at least one pizza")
else:
   print("Either you are not hungry or the food is not pizza")

if not drink == "fizzyPop":
   print("No drink for me.")

#The above is same as:
if drink != "fizzyPop":
   print("No drink for me.")
#+END_SRC

** Learn It - create an array of numbers or strings
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

#+BEGIN_SRC Python
# An array of numbers
testScores = [98, 78, 65, 89, 75]

# An array of strings
names = ['Jack', 'Kerry', 'Julia', 'Matthew', 'David']

#+END_SRC


** Learn It - array index and get an item from an array
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Each individual data pieces is called an item
- Each item has a position number called =index=
- For the following array, names, "Jack" is at index 0.
- To get "Jack", you use =names[0]=
#+BEGIN_SRC Python
# An array of strings
names = ['Jack', 'Kerry', 'Julia', 'Matthew', 'David']

#+END_SRC

[[./img/arrayIndex.png]]
** Learn It - swap the positions of two items in an array
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Swap the position of "Jack" with "Julia"
  1. Method 1: use a temporary variable 
   #+BEGIN_SRC Python
names = ['Jack', 'Kerry', 'Julia', 'Matthew', 'David']

temp = names[0]
names[0] = names[2]
names[2] = temp
   #+END_SRC
  2. Method 2: in place swap
      #+BEGIN_SRC Python
  names = ['Jack', 'Kerry', 'Julia', 'Matthew', 'David']

  names[0],names[2] = names[2],names[0]
  
     #+END_SRC
** Learn It - generate random numbers
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- In Python, to generate random numbers, you use a module call *random*
- At the start of your program/code, you need to import the module *random*
  1. exmaple 1: generate a random whole number from 0 up to a limit 
   #+BEGIN_SRC Python

    import random

    randomNumber = random.randrange(100)
    # The above code picks a random number between 0 and 99

    randomNumber = random.randrange(2, 10, 2)
    # The above code picks a random number from 2, 4, 6, 8 (goes up by 2)

   #+END_SRC

  2. exmaple 2: generate a random number between a range 
   #+BEGIN_SRC Python

    import random
    randomNumber = random.randint(1, 100)
    # The above code picks a random whole number between 1 and 100

    randomNumber = random.randint(50, 100)
    # The above code picks a random whole number between 50 and 100

   #+END_SRC

  3. example 3: pick a random item from a list
      #+BEGIN_SRC Python
    
    import random

    names = ['Jack', 'Kerry', 'Julia', 'Matthew', 'David']

    randomIndex = random.randrange(len(names))

    print("The random picked name is: ", names[randomIndex])
  
     #+END_SRC
